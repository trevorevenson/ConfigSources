<?xml version="1.0" encoding="UTF-8" ?>
<feed  version="1.0" hasPendingRequests="false" >
	<company></company>
	<status>200</status>
	<errmsg>OK</errmsg>
	<interval>0</interval>
    <entry type="predatasource">
        <version>1524203747</version>
        <name>ActiveDirectory_AdminGroups</name>
        <displayedas>Admin Groups</displayedas>
        <description>Lists all members of Administrator and Domain Admin groups.</description>
        <collector>script</collector>
        <hasMultiInstances>false</hasMultiInstances>
        <schedule>3600</schedule>
        <appliesTo>hasCategory(&#34;MicrosoftDomainController&#34;)</appliesTo>
        <wildcardauto>false</wildcardauto>
        <wildcardpersist>false</wildcardpersist>
        <wildcardlinuxscript></wildcardlinuxscript>
        <wildcardlinuxcmdline></wildcardlinuxcmdline>
        <wildcardwinscript></wildcardwinscript>
        <wildcardwincmdline></wildcardwincmdline>
        <wildcardgroovyscript></wildcardgroovyscript>
        <wildcardschedule>1440</wildcardschedule>
        <wildcarddisable>false</wildcarddisable>
        <wildcarddeleteinactive>false</wildcarddeleteinactive>
        <agdmethod>none</agdmethod>
        <agdparams></agdparams>
        <group>Active Directory Configs</group>
        <tags></tags>
        <technology></technology>
        <adlist><![CDATA[{"agdmethod":"none","agdparams":"","id":0,"filters":[],"params":{}}]]></adlist>
        <schemaVersion>2</schemaVersion>
        <dataSourceType>2</dataSourceType>
        <attributes>
        <attribute>
            <name>scripttype</name>
            <value>powerShell</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>scriptgroovy</name>
            <value>#script version 4.1 - better credential detection and integrated authentication - commented for usability

#Format width of output
mode con cols=120

#Ingest hostname and credentials (if present) from LogicMonitor
$hostname = &#34;##SYSTEM.SYSNAME##&#34;;
$wmi_user = &#34;##WMI.USER##&#34;;
$wmi_pass = &#34;##WMI.PASS##&#34;;

#Are wmi user/ pass set? -- e.g. are these device properties blank - or is there something useful present?
if ( (($wmi_user -like &#39;*WMI.USER*&#39;) -and ($wmi_pass -like &#39;*WMI.PASS*&#39;)) -or (($wmi_user -eq &#39;&#39;) -and ($wmi_pass -eq &#39;&#39;)) )
{
    $use_credentials = $FALSE;
    $method = &#34;invoke-command&#34;;
}

else
{
    # convert user/ password into a credential object
    $use_credentials = $TRUE;
    $method = &#34;import-pssession&#34;;

    $remote_pass       = ConvertTo-SecureString -String $wmi_pass -AsPlainText -Force;
    $remote_credential = New-Object -typename System.Management.Automation.PSCredential -argumentlist $wmi_user, $remote_pass;
}

#If we found credentials above, we will use them
if ( $use_credentials ) {
    #establish a persistent session and import commands to the local collector
    $session = New-PSSession -ComputerName $hostname -authentication kerberos -Credential $remote_credential;
    Import-PSSession -session $session -Module &#39;ActiveDirectory&#39; -AllowClobber | Out-Null;

    #Retrieve the list of AD Groups on the server
    $Groups = Get-ADGroup -Filter {(name -like &#34;Administrators&#34;) -or (name -like &#34;Domain Admins&#34;) -or (name -like &#34;Enterprise Admins&#34;)-or (name -like &#34;Schema Admins&#34;)} 

    $Results = foreach( $Group in $Groups ){

        Get-ADGroupMember -Identity $Group.Name | foreach {

            [pscustomobject]@{
                Scope = $Group.GroupScope
                GroupName = $Group.Name
                Name = $_.Name
                }
            }
        }
    $Results = $Results | Sort-Object Scope,GroupName,Name | format-table -autosize

    $Results

    Write-host &#34;Fetched with&#34; $method
    
    Remove-PSSession $session
    
    exit
}

else {
    #integrated authentication or when we don&#39;t detect credentials
    $admins = Invoke-Command -ComputerName $hostname -ScriptBlock {
    #Retrieve the list of AD Groups on the server
    $Groups = Get-ADGroup -Filter {(name -like &#34;Administrators&#34;) -or (name -like &#34;Domain Admins&#34;) -or (name -like &#34;Enterprise Admins&#34;)-or (name -like &#34;Schema Admins&#34;)};

    $Results = foreach( $Group in $Groups ){

        Get-ADGroupMember -Identity $Group | foreach {

            [pscustomobject]@{
                Scope = $Group.GroupScope
                GroupName = $Group.Name
                Name = $_.Name
                }
            }
        }
    $Results = $Results | sort-object Scope,GroupName,Name | format-table -autosize

    $Results

    }
        
    $admins

    Write-host &#34;Fetched with&#34; $method
        
}

Exit</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>windowsscript</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>linuxscript</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>windowscmdline</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>linuxcmdline</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>csfileformat</name>
            <value>arbitrary</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>cstimestampformat</name>
            <value>yyyy-MM-dd hh:mm:ss z</value>
            <comment></comment>
        </attribute>
        </attributes>
        <datapoints>
        <datapoint>
            <name>AnyChange</name>
            <dataType>1</dataType>
            <type>2</type>
            <postprocessormethod>none</postprocessormethod>
            <postprocessorparam>{&#34;format&#34;:&#34;arbitrary&#34;,&#34;diff_check&#34;:{}}</postprocessorparam>
            <usevalue></usevalue>
            <alertexpr>= 1</alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <description>A change was detected in the membership or configuration of Active Directory Administrative Groups.</description>
            <maxvalue>1</maxvalue>
            <minvalue>0</minvalue>
            <userparam1>ignore</userparam1>
            <userparam2>true</userparam2>
            <userparam3>120</userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        </datapoints>
        <graphs>
        </graphs>
        <overviewgraphs>
        </overviewgraphs>
        <scripts>
        </scripts>
    </entry>
    <entry type="predatasource">
        <version>1524203890</version>
        <name>ActiveDirectory_Users</name>
        <displayedas>Users</displayedas>
        <description>List of Active Directory Domain Users and enabled/ disabled status.</description>
        <collector>script</collector>
        <hasMultiInstances>false</hasMultiInstances>
        <schedule>3600</schedule>
        <appliesTo>hasCategory(&#34;MicrosoftDomainController&#34;)</appliesTo>
        <wildcardauto>false</wildcardauto>
        <wildcardpersist>false</wildcardpersist>
        <wildcardlinuxscript></wildcardlinuxscript>
        <wildcardlinuxcmdline></wildcardlinuxcmdline>
        <wildcardwinscript></wildcardwinscript>
        <wildcardwincmdline></wildcardwincmdline>
        <wildcardgroovyscript></wildcardgroovyscript>
        <wildcardschedule>1440</wildcardschedule>
        <wildcarddisable>false</wildcarddisable>
        <wildcarddeleteinactive>false</wildcarddeleteinactive>
        <agdmethod>none</agdmethod>
        <agdparams></agdparams>
        <group>Active Directory Configs</group>
        <tags></tags>
        <technology>https://docs.microsoft.com/en-us/powershell/module/addsadministration/get-aduser?view=win10-ps</technology>
        <adlist><![CDATA[{"agdmethod":"none","agdparams":"","id":0,"filters":[],"params":{}}]]></adlist>
        <schemaVersion>2</schemaVersion>
        <dataSourceType>2</dataSourceType>
        <attributes>
        <attribute>
            <name>scripttype</name>
            <value>powerShell</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>scriptgroovy</name>
            <value>#script version 4.1 - better credential detection and integrated authentication - commented for usability

#Format width of output
mode con cols=120

#Ingest hostname and credentials (if present) from LogicMonitor
$hostname = &#34;##SYSTEM.SYSNAME##&#34;;
$wmi_user = &#34;##WMI.USER##&#34;;
$wmi_pass = &#34;##WMI.PASs##&#34;;

#Are wmi user/ pass set? -- e.g. are these device properties blank - or is there something useful present?
if ( (($wmi_user -like &#39;*WMI.USER*&#39;) -and ($wmi_pass -like &#39;*WMI.PASS*&#39;)) -or (($wmi_user -eq &#39;&#39;) -and ($wmi_pass -eq &#39;&#39;)) )
{
    $use_credentials = $FALSE;
    $method = &#34;invoke-command&#34;;
}

else
{
    # convert user/ password into a credential object
    $use_credentials = $TRUE;
    $method = &#34;import-pssession&#34;;

    $remote_pass       = ConvertTo-SecureString -String $wmi_pass -AsPlainText -Force;
    $remote_credential = New-Object -typename System.Management.Automation.PSCredential -argumentlist $wmi_user, $remote_pass;
}

#If we found credentials above, we will use them
if ( $use_credentials ) {
    #establish a persistent session and import commands to the local collector
    $session = New-PSSession -ComputerName $hostname -authentication kerberos -Credential $remote_credential;
    Import-PSSession $session -CommandName Get-ADUser -AllowClobber | Out-Null;

    #Retrieve the list of AD Groups on the server
    $users = Get-ADUser -Filter * | sort-object -property Enabled,Name | select Enabled,Name | Format-Table

    $users

    Write-host &#34;Fetched with&#34; $method
    
    Remove-PSSession $session
    
    exit
}
else {
    #try integrated authentication when we don&#39;t detect credentials
    $users = Invoke-Command -ComputerName $hostname -ScriptBlock {
        Get-ADUser -Filter * | sort-object -property Enabled,Name | select Enabled,Name | Format-Table 
    }
        
    $users

    Write-host &#34;Fetched with&#34; $method
        
}

Exit</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>windowsscript</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>linuxscript</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>windowscmdline</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>linuxcmdline</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>csfileformat</name>
            <value>arbitrary</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>cstimestampformat</name>
            <value>yyyy-MM-dd hh:mm:ss z</value>
            <comment></comment>
        </attribute>
        </attributes>
        <datapoints>
        <datapoint>
            <name>AnyChange</name>
            <dataType>1</dataType>
            <type>2</type>
            <postprocessormethod>none</postprocessormethod>
            <postprocessorparam>{&#34;format&#34;:&#34;arbitrary&#34;,&#34;diff_check&#34;:{}}</postprocessorparam>
            <usevalue></usevalue>
            <alertexpr>= 1</alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <description>A change was detected in the configuration or membership of Active Directory Users.</description>
            <maxvalue>1</maxvalue>
            <minvalue>0</minvalue>
            <userparam1>ignore</userparam1>
            <userparam2>true</userparam2>
            <userparam3>60</userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        </datapoints>
        <graphs>
        </graphs>
        <overviewgraphs>
        </overviewgraphs>
        <scripts>
        </scripts>
    </entry>
    <entry type="predatasource">
        <version>1524203868</version>
        <name>ActiveDirectory_SitesSubnets</name>
        <displayedas>Sites and Subnets</displayedas>
        <description>List of Active Directory Forest Sites/ Subnets.</description>
        <collector>script</collector>
        <hasMultiInstances>false</hasMultiInstances>
        <schedule>3600</schedule>
        <appliesTo>hasCategory(&#34;MicrosoftDomainController&#34;)</appliesTo>
        <wildcardauto>false</wildcardauto>
        <wildcardpersist>false</wildcardpersist>
        <wildcardlinuxscript></wildcardlinuxscript>
        <wildcardlinuxcmdline></wildcardlinuxcmdline>
        <wildcardwinscript></wildcardwinscript>
        <wildcardwincmdline></wildcardwincmdline>
        <wildcardgroovyscript></wildcardgroovyscript>
        <wildcardschedule>1440</wildcardschedule>
        <wildcarddisable>false</wildcarddisable>
        <wildcarddeleteinactive>false</wildcarddeleteinactive>
        <agdmethod>none</agdmethod>
        <agdparams></agdparams>
        <group>Active Directory Configs</group>
        <tags></tags>
        <technology>https://docs.microsoft.com/en-us/powershell/module/addsadministration/get-adreplicationsubnet?view=win10-ps</technology>
        <adlist><![CDATA[{"agdmethod":"none","agdparams":"","id":0,"filters":[],"params":{}}]]></adlist>
        <schemaVersion>2</schemaVersion>
        <dataSourceType>2</dataSourceType>
        <attributes>
        <attribute>
            <name>scripttype</name>
            <value>powerShell</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>scriptgroovy</name>
            <value>#script version 4.1 - better credential detection and integrated authentication - commented for usability

#Format width of output
mode con cols=120

#Ingest hostname and credentials (if present) from LogicMonitor
$hostname = &#34;##SYSTEM.SYSNAME##&#34;;
$wmi_user = &#34;##WMI.USER##&#34;;
$wmi_pass = &#34;##WMI.PASs##&#34;;

#Are wmi user/ pass set? -- e.g. are these device properties blank - or is there something useful present?
if ( (($wmi_user -like &#39;*WMI.USER*&#39;) -and ($wmi_pass -like &#39;*WMI.PASS*&#39;)) -or (($wmi_user -eq &#39;&#39;) -and ($wmi_pass -eq &#39;&#39;)) )
{
    $use_credentials = $FALSE;
    $method = &#34;invoke-command&#34;;
}

else
{
    # convert user/ password into a credential object
    $use_credentials = $TRUE;
    $method = &#34;import-pssession&#34;;

    $remote_pass       = ConvertTo-SecureString -String $wmi_pass -AsPlainText -Force;
    $remote_credential = New-Object -typename System.Management.Automation.PSCredential -argumentlist $wmi_user, $remote_pass;
}

#If we found credentials above, we will use them
if ( $use_credentials ) {
    #establish a persistent session and import commands to the local collector
    $session = New-PSSession -ComputerName $hostname -authentication kerberos -Credential $remote_credential;
    Import-PSSession $session -CommandName Get-ADReplicationSubnet -AllowClobber | Out-Null;

    #Retrieve the list of AD Groups on the server
    $sites = Get-ADReplicationSubnet -Filter * | Format-List; 

    $sites

    Write-host &#34;Fetched with&#34; $method
    
    Remove-PSSession $session
    
    exit
}

else {
    #try integrated authentication when we don&#39;t detect credentials
    $sites = Invoke-Command -ComputerName $hostname -ScriptBlock {
        Get-ADReplicationSubnet -Filter * | Format-List; 
    }
        
    $sites

    Write-host &#34;Fetched with&#34; $method
        
}

Exit</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>windowsscript</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>linuxscript</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>windowscmdline</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>linuxcmdline</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>csfileformat</name>
            <value>arbitrary</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>cstimestampformat</name>
            <value>yyyy-MM-dd hh:mm:ss z</value>
            <comment></comment>
        </attribute>
        </attributes>
        <datapoints>
        <datapoint>
            <name>AnyChange</name>
            <dataType>1</dataType>
            <type>2</type>
            <postprocessormethod>none</postprocessormethod>
            <postprocessorparam>{&#34;format&#34;:&#34;arbitrary&#34;,&#34;diff_check&#34;:{}}</postprocessorparam>
            <usevalue></usevalue>
            <alertexpr>= 1</alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <description>A change was detected in the configuration or properties of the Active Directory Sites and Subnets.</description>
            <maxvalue>1</maxvalue>
            <minvalue>0</minvalue>
            <userparam1>ignore</userparam1>
            <userparam2>true</userparam2>
            <userparam3>60</userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        </datapoints>
        <graphs>
        </graphs>
        <overviewgraphs>
        </overviewgraphs>
        <scripts>
        </scripts>
    </entry>
    <entry type="predatasource">
        <version>1524207068</version>
        <name>ActiveDirectory_PasswordPolicy</name>
        <displayedas>Password Policy</displayedas>
        <description>Analyzes the default domain password policy - and alerts on deviations from Microsoft best practice recommendations.</description>
        <collector>script</collector>
        <hasMultiInstances>false</hasMultiInstances>
        <schedule>3600</schedule>
        <appliesTo>hasCategory(&#34;MicrosoftDomainController&#34;)</appliesTo>
        <wildcardauto>false</wildcardauto>
        <wildcardpersist>false</wildcardpersist>
        <wildcardlinuxscript></wildcardlinuxscript>
        <wildcardlinuxcmdline></wildcardlinuxcmdline>
        <wildcardwinscript></wildcardwinscript>
        <wildcardwincmdline></wildcardwincmdline>
        <wildcardgroovyscript></wildcardgroovyscript>
        <wildcardschedule>1440</wildcardschedule>
        <wildcarddisable>false</wildcarddisable>
        <wildcarddeleteinactive>false</wildcarddeleteinactive>
        <agdmethod>none</agdmethod>
        <agdparams></agdparams>
        <group>Active Directory Configs</group>
        <tags></tags>
        <technology>https://technet.microsoft.com/en-us/library/dd277399.aspx</technology>
        <adlist><![CDATA[{"agdmethod":"none","agdparams":"","id":0,"filters":[],"params":{}}]]></adlist>
        <schemaVersion>2</schemaVersion>
        <dataSourceType>2</dataSourceType>
        <attributes>
        <attribute>
            <name>scripttype</name>
            <value>powerShell</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>scriptgroovy</name>
            <value>#script version 4.1 - better credential detection and integrated authentication - commented for usability

#Format width of output
mode con cols=120

#Ingest hostname and credentials (if present) from LogicMonitor
$hostname = &#34;##SYSTEM.SYSNAME##&#34;;
$wmi_user = &#34;##WMI.USER##&#34;;
$wmi_pass = &#34;##WMI.PASs##&#34;;

#Are wmi user/ pass set? -- e.g. are these device properties blank - or is there something useful present?
if ( (($wmi_user -like &#39;*WMI.USER*&#39;) -and ($wmi_pass -like &#39;*WMI.PASS*&#39;)) -or (($wmi_user -eq &#39;&#39;) -and ($wmi_pass -eq &#39;&#39;)) )
{
    $use_credentials = $FALSE;
    $method = &#34;invoke-command&#34;;
}

else
{
    # convert user/ password into a credential object
    $use_credentials = $TRUE;
    $method = &#34;import-pssession&#34;;

    $remote_pass       = ConvertTo-SecureString -String $wmi_pass -AsPlainText -Force;
    $remote_credential = New-Object -typename System.Management.Automation.PSCredential -argumentlist $wmi_user, $remote_pass;
}

#If we found credentials above, we will use them
if ( $use_credentials ) {
    #establish a persistent session and import commands to the local collector
    $session = New-PSSession -ComputerName $hostname -authentication kerberos -Credential $remote_credential;
    Import-PSSession $session -CommandName Get-GPO -AllowClobber | Out-Null;

#Retrieve the Default Domain Password Policy
$pp = Get-ADDefaultDomainPasswordPolicy

#Groom our data for digestible output
$ce = switch ($pp.ComplexityEnabled) 
    { 
        False {&#34;0&#34;} 
        True {&#34;1&#34;}
    }
$ld = [TimeSpan]::Parse($pp.LockoutDuration)
$ldt = $ld.TotalMinutes
$lw = [TimeSpan]::Parse($pp.LockoutObservationWindow)
$lwt = $lw.TotalMinutes
$minpa = [TimeSpan]::Parse($pp.MinPasswordAge)
$minpad = $minpa.Days
$maxpa = [TimeSpan]::Parse($pp.MaxPasswordAge)
$maxpad = $maxpa.Days
$rev = switch ($pp.ReversibleEncryptionEnabled) 
    { 
        False {&#34;0&#34;} 
        True {&#34;1&#34;}
    }

#Output our password policy values so LM cam read them
write-host &#34;Complexity Enabled =&#34; $ce - $pp.ComplexityEnabled
write-host &#34;Lockout Duration in Minutes =&#34; $ldt
write-host &#34;Lockout Observation Window in Minutes =&#34; $lwt
write-host &#34;Lockout Threshold =&#34; $pp.LockoutThreshold &#34;attempts&#34;
write-host &#34;Minimum Password Age in Days =&#34; $minpad 
write-host &#34;Maximum Password Age in Days =&#34; $maxpad
write-host &#34;Minimum Password Length =&#34; $pp.MinPasswordLength &#34;characters&#34;
write-host &#34;Password History Recollection Count =&#34; $pp.PasswordHistoryCount &#34;passwords&#34;
write-host &#34;Reversible Encryption Enabled =&#34; $rev - $pp.ReversibleEncryptionEnabled

Write-host &#34;Fetched with&#34; $method
    
Remove-PSSession $session
    
exit
}

else {
    #try integrated authentication when we don&#39;t detect credentials
    $policy = Invoke-Command -ComputerName $hostname -ScriptBlock {
    #Retrieve the Default Domain Password Policy
$pp = Get-ADDefaultDomainPasswordPolicy

#Groom our data for digestible output
$ce = switch ($pp.ComplexityEnabled) 
    { 
        False {&#34;0&#34;} 
        True {&#34;1&#34;}
    }
$ld = [TimeSpan]::Parse($pp.LockoutDuration)
$ldt = $ld.TotalMinutes
$lw = [TimeSpan]::Parse($pp.LockoutObservationWindow)
$lwt = $lw.TotalMinutes
$minpa = [TimeSpan]::Parse($pp.MinPasswordAge)
$minpad = $minpa.Days
$maxpa = [TimeSpan]::Parse($pp.MaxPasswordAge)
$maxpad = $maxpa.Days
$rev = switch ($pp.ReversibleEncryptionEnabled) 
    { 
        False {&#34;0&#34;} 
        True {&#34;1&#34;}
    }

#Output our password policy values so LM cam read them
write-host &#34;Complexity Enabled =&#34; $ce - $pp.ComplexityEnabled
write-host &#34;Lockout Duration in Minutes =&#34; $ldt
write-host &#34;Lockout Observation Window in Minutes =&#34; $lwt
write-host &#34;Lockout Threshold =&#34; $pp.LockoutThreshold &#34;attempts&#34;
write-host &#34;Minimum Password Age in Days =&#34; $minpad 
write-host &#34;Maximum Password Age in Days =&#34; $maxpad
write-host &#34;Minimum Password Length =&#34; $pp.MinPasswordLength &#34;characters&#34;
write-host &#34;Password History Recollection Count =&#34; $pp.PasswordHistoryCount &#34;passwords&#34;
write-host &#34;Reversible Encryption Enabled =&#34; $rev - $pp.ReversibleEncryptionEnabled    
        
    }
        
    $policy

    Write-host &#34;Fetched with&#34; $method
        
}

Exit</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>windowsscript</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>linuxscript</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>windowscmdline</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>linuxcmdline</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>csfileformat</name>
            <value>arbitrary</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>cstimestampformat</name>
            <value>yyyy-MM-dd hh:mm:ss z</value>
            <comment></comment>
        </attribute>
        </attributes>
        <datapoints>
        <datapoint>
            <name>PasswordHistoryCount</name>
            <dataType>1</dataType>
            <type>2</type>
            <postprocessormethod>none</postprocessormethod>
            <postprocessorparam>{&#34;value_check&#34;:{&#34;variable&#34;:&#34;PasswordHistoryCount:\\s+(\\d+)&#34;,&#34;must&#34;:[{&#34;range&#34;:{&#34;lte&#34;:&#34;3&#34;}}]},&#34;format&#34;:&#34;arbitrary&#34;}</postprocessorparam>
            <usevalue></usevalue>
            <alertexpr>= 1</alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <description>This sets how frequently old passwords can be reused. With this policy, you can discourage users from alternating between several common passwords.</description>
            <maxvalue>1</maxvalue>
            <minvalue>0</minvalue>
            <userparam1>value</userparam1>
            <userparam2>false</userparam2>
            <userparam3>0</userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        <datapoint>
            <name>ComplexityEnabled</name>
            <dataType>1</dataType>
            <type>2</type>
            <postprocessormethod>none</postprocessormethod>
            <postprocessorparam>{&#34;value_check&#34;:{&#34;variable&#34;:&#34;Complexity Enabled =\\s+(\\d+)&#34;,&#34;must&#34;:[{&#34;range&#34;:{&#34;ne&#34;:&#34;1&#34;}}]},&#34;format&#34;:&#34;arbitrary&#34;}</postprocessorparam>
            <usevalue></usevalue>
            <alertexpr>= 1</alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <description>These facilities enforce the use of secure passwords.</description>
            <maxvalue>1</maxvalue>
            <minvalue>0</minvalue>
            <userparam1>value</userparam1>
            <userparam2>false</userparam2>
            <userparam3>0</userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        <datapoint>
            <name>LockoutDurationMinutes</name>
            <dataType>1</dataType>
            <type>2</type>
            <postprocessormethod>none</postprocessormethod>
            <postprocessorparam>{&#34;value_check&#34;:{&#34;variable&#34;:&#34;LockoutDurationMinutes:\\s+(\\d+)&#34;,&#34;must&#34;:[{&#34;range&#34;:{&#34;lt&#34;:&#34;60&#34;}}]},&#34;format&#34;:&#34;arbitrary&#34;}</postprocessorparam>
            <usevalue></usevalue>
            <alertexpr>= 1</alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <description>The Account lockout duration determines the number of minutes that a locked-out account remains locked out before automatically becoming unlocked. https://technet.microsoft.com/en-us/library/hh994569(v=ws.11).aspx</description>
            <maxvalue>1</maxvalue>
            <minvalue>0</minvalue>
            <userparam1>value</userparam1>
            <userparam2>false</userparam2>
            <userparam3>0</userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        <datapoint>
            <name>LockoutObservationWindow</name>
            <dataType>1</dataType>
            <type>2</type>
            <postprocessormethod>none</postprocessormethod>
            <postprocessorparam>{&#34;value_check&#34;:{&#34;variable&#34;:&#34;LockoutObservationWindow:\\s+(\\d+)&#34;,&#34;must&#34;:[{&#34;range&#34;:{&#34;lt&#34;:&#34;60&#34;}}]},&#34;format&#34;:&#34;arbitrary&#34;}</postprocessorparam>
            <usevalue></usevalue>
            <alertexpr>= 1</alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <description>The range of time in which the system increments the incorrect logon count.</description>
            <maxvalue>1</maxvalue>
            <minvalue>0</minvalue>
            <userparam1>value</userparam1>
            <userparam2>false</userparam2>
            <userparam3>0</userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        <datapoint>
            <name>LockoutThreshold</name>
            <dataType>1</dataType>
            <type>2</type>
            <postprocessormethod>none</postprocessormethod>
            <postprocessorparam>{&#34;value_check&#34;:{&#34;variable&#34;:&#34;LockoutThreshold:\\s+(\\d+)&#34;,&#34;must&#34;:[{&#34;range&#34;:{&#34;lt&#34;:&#34;5&#34;}}]},&#34;format&#34;:&#34;arbitrary&#34;}</postprocessorparam>
            <usevalue></usevalue>
            <alertexpr>= 1</alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <description>The Account lockout threshold policy setting determines the number of failed sign-in attempts that will cause a user account to be locked. https://technet.microsoft.com/en-us/library/hh994574(v=ws.11).aspx</description>
            <maxvalue>1</maxvalue>
            <minvalue>0</minvalue>
            <userparam1>value</userparam1>
            <userparam2>false</userparam2>
            <userparam3>0</userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        <datapoint>
            <name>MaxPasswordAgeDays</name>
            <dataType>1</dataType>
            <type>2</type>
            <postprocessormethod>none</postprocessormethod>
            <postprocessorparam>{&#34;value_check&#34;:{&#34;variable&#34;:&#34;MaxPasswordAgeDays:\\s+(\\d+)&#34;,&#34;must&#34;:[{&#34;range&#34;:{&#34;gt&#34;:&#34;180&#34;}}]},&#34;format&#34;:&#34;arbitrary&#34;}</postprocessorparam>
            <usevalue></usevalue>
            <alertexpr>= 1</alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <description>This determines how long users can keep a password before they have to change it. The aim is to force users to change their passwords periodically. Default alert threshold set here is 6 months (179 days.)</description>
            <maxvalue>1</maxvalue>
            <minvalue>0</minvalue>
            <userparam1>value</userparam1>
            <userparam2>false</userparam2>
            <userparam3>0</userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        <datapoint>
            <name>MinPasswordAgeDays</name>
            <dataType>1</dataType>
            <type>2</type>
            <postprocessormethod>none</postprocessormethod>
            <postprocessorparam>{&#34;value_check&#34;:{&#34;variable&#34;:&#34;MinPasswordAgeDays:\\s+(\\d+)&#34;,&#34;must&#34;:[{&#34;range&#34;:{&#34;lt&#34;:&#34;3&#34;}}]},&#34;format&#34;:&#34;arbitrary&#34;}</postprocessorparam>
            <usevalue></usevalue>
            <alertexpr>= 1</alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <description>The Minimum password age policy setting determines the period of time (in days) that a password can be used before the system requires the user to change it.</description>
            <maxvalue>1</maxvalue>
            <minvalue>0</minvalue>
            <userparam1>value</userparam1>
            <userparam2>false</userparam2>
            <userparam3>0</userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        <datapoint>
            <name>MinPasswordLength</name>
            <dataType>1</dataType>
            <type>2</type>
            <postprocessormethod>none</postprocessormethod>
            <postprocessorparam>{&#34;value_check&#34;:{&#34;variable&#34;:&#34;MinPasswordLength:\\s+(\\d+)&#34;,&#34;must&#34;:[{&#34;range&#34;:{&#34;lt&#34;:&#34;7&#34;}}]},&#34;format&#34;:&#34;arbitrary&#34;}</postprocessorparam>
            <usevalue></usevalue>
            <alertexpr>= 1</alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <description>This sets the minimum number of characters for a password. If you haven’t changed the default setting, you should do so immediately. https://technet.microsoft.com/en-us/library/ff741764.aspx</description>
            <maxvalue>1</maxvalue>
            <minvalue>0</minvalue>
            <userparam1>value</userparam1>
            <userparam2>false</userparam2>
            <userparam3>0</userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        <datapoint>
            <name>ReversibleEncryptionEnabled</name>
            <dataType>1</dataType>
            <type>2</type>
            <postprocessormethod>none</postprocessormethod>
            <postprocessorparam>{&#34;value_check&#34;:{&#34;variable&#34;:&#34;Reversible Encryption Enabled =\\s+(\\d+)&#34;,&#34;must&#34;:[{&#34;range&#34;:{&#34;ne&#34;:&#34;0&#34;}}]},&#34;format&#34;:&#34;arbitrary&#34;}</postprocessorparam>
            <usevalue></usevalue>
            <alertexpr>= 1</alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <description>Storing encrypted passwords in a way that is reversible means that the encrypted passwords can be decrypted. https://technet.microsoft.com/en-us/library/hh994559(v=ws.11).aspx</description>
            <maxvalue>1</maxvalue>
            <minvalue>0</minvalue>
            <userparam1>value</userparam1>
            <userparam2>false</userparam2>
            <userparam3>0</userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        <datapoint>
            <name>AnyChange</name>
            <dataType>1</dataType>
            <type>2</type>
            <postprocessormethod>none</postprocessormethod>
            <postprocessorparam>{&#34;format&#34;:&#34;arbitrary&#34;,&#34;diff_check&#34;:{}}</postprocessorparam>
            <usevalue></usevalue>
            <alertexpr>= 1</alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <description>A change was detected in the Active Directory Default Domain Password Policy.</description>
            <maxvalue>1</maxvalue>
            <minvalue>0</minvalue>
            <userparam1>ignore</userparam1>
            <userparam2>true</userparam2>
            <userparam3>60</userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        </datapoints>
        <graphs>
        </graphs>
        <overviewgraphs>
        </overviewgraphs>
        <scripts>
        </scripts>
    </entry>
    <entry type="predatasource">
        <version>1524205084</version>
        <name>ActiveDirectory_OrganizationalUnits</name>
        <displayedas>Organizational Units</displayedas>
        <description>List of Active Directory Organizational Units.</description>
        <collector>script</collector>
        <hasMultiInstances>false</hasMultiInstances>
        <schedule>3600</schedule>
        <appliesTo>hasCategory(&#34;MicrosoftDomainController&#34;)</appliesTo>
        <wildcardauto>false</wildcardauto>
        <wildcardpersist>false</wildcardpersist>
        <wildcardlinuxscript></wildcardlinuxscript>
        <wildcardlinuxcmdline></wildcardlinuxcmdline>
        <wildcardwinscript></wildcardwinscript>
        <wildcardwincmdline></wildcardwincmdline>
        <wildcardgroovyscript></wildcardgroovyscript>
        <wildcardschedule>1440</wildcardschedule>
        <wildcarddisable>false</wildcarddisable>
        <wildcarddeleteinactive>false</wildcarddeleteinactive>
        <agdmethod>none</agdmethod>
        <agdparams></agdparams>
        <group>Active Directory Configs</group>
        <tags></tags>
        <technology>https://docs.microsoft.com/en-us/powershell/module/addsadministration/get-adobject?view=win10-ps</technology>
        <adlist><![CDATA[{"agdmethod":"none","agdparams":"","id":0,"filters":[],"params":{}}]]></adlist>
        <schemaVersion>2</schemaVersion>
        <dataSourceType>2</dataSourceType>
        <attributes>
        <attribute>
            <name>scripttype</name>
            <value>powerShell</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>scriptgroovy</name>
            <value>#script version 4.1 - better credential detection and integrated authentication - commented for usability

#Format width of output
mode con cols=120

#Ingest hostname and credentials (if present) from LogicMonitor
$hostname = &#34;##SYSTEM.SYSNAME##&#34;;
$wmi_user = &#34;##WMI.USER##&#34;;
$wmi_pass = &#34;##WMI.PASs##&#34;;

#Are wmi user/ pass set? -- e.g. are these device properties blank - or is there something useful present?
if ( (($wmi_user -like &#39;*WMI.USER*&#39;) -and ($wmi_pass -like &#39;*WMI.PASS*&#39;)) -or (($wmi_user -eq &#39;&#39;) -and ($wmi_pass -eq &#39;&#39;)) )
{
    $use_credentials = $FALSE;
    $method = &#34;invoke-command&#34;;
}

else
{
    # convert user/ password into a credential object
    $use_credentials = $TRUE;
    $method = &#34;import-pssession&#34;;

    $remote_pass       = ConvertTo-SecureString -String $wmi_pass -AsPlainText -Force;
    $remote_credential = New-Object -typename System.Management.Automation.PSCredential -argumentlist $wmi_user, $remote_pass;
}

#If we found credentials above, we will use them
if ( $use_credentials ) {
    #establish a persistent session and import commands to the local collector
    $session = New-PSSession -ComputerName $hostname -authentication kerberos -Credential $remote_credential;
    Import-PSSession $session -CommandName Get-ADObject -AllowClobber | Out-Null;

    #Retrieve the list of AD Groups on the server
    $ous = Get-ADObject -Filter {(ObjectClass -eq &#39;organizationalunit&#39;) -or (ObjectClass -eq &#39;container&#39;)} -Properties Name,CanonicalName | Select-Object -Property CanonicalName | Sort-object CanonicalName | Format-Table;

    $ous

    Write-host &#34;Fetched with&#34; $method
    
    Remove-PSSession $session
    
    exit
}

else {
    #try integrated authentication when we don&#39;t detect credentials
    $ous = Invoke-Command -ComputerName $hostname -ScriptBlock {
        Get-ADObject -Filter {(ObjectClass -eq &#39;organizationalunit&#39;) -or (ObjectClass -eq &#39;container&#39;)} -Properties Name,CanonicalName | Select-Object -Property CanonicalName | Sort-object CanonicalName | Format-Table;
    }
        
    $ous

    Write-host &#34;Fetched with&#34; $method
        
}

Exit</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>windowsscript</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>linuxscript</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>windowscmdline</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>linuxcmdline</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>csfileformat</name>
            <value>arbitrary</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>cstimestampformat</name>
            <value>yyyy-MM-dd hh:mm:ss z</value>
            <comment></comment>
        </attribute>
        </attributes>
        <datapoints>
        <datapoint>
            <name>AnyChange</name>
            <dataType>1</dataType>
            <type>2</type>
            <postprocessormethod>none</postprocessormethod>
            <postprocessorparam>{&#34;format&#34;:&#34;arbitrary&#34;,&#34;diff_check&#34;:{}}</postprocessorparam>
            <usevalue></usevalue>
            <alertexpr>= 1</alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <description>A change was detected in the configuration of Active Directory Organizational Units.</description>
            <maxvalue>1</maxvalue>
            <minvalue>0</minvalue>
            <userparam1>ignore</userparam1>
            <userparam2>true</userparam2>
            <userparam3>60</userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        </datapoints>
        <graphs>
        </graphs>
        <overviewgraphs>
        </overviewgraphs>
        <scripts>
        </scripts>
    </entry>
    <entry type="predatasource">
        <version>1524203848</version>
        <name>ActiveDirectory_Groups</name>
        <displayedas>Groups</displayedas>
        <description>Active Directory Groups information.</description>
        <collector>script</collector>
        <hasMultiInstances>false</hasMultiInstances>
        <schedule>3600</schedule>
        <appliesTo>hasCategory(&#34;MicrosoftDomainController&#34;)</appliesTo>
        <wildcardauto>false</wildcardauto>
        <wildcardpersist>false</wildcardpersist>
        <wildcardlinuxscript></wildcardlinuxscript>
        <wildcardlinuxcmdline></wildcardlinuxcmdline>
        <wildcardwinscript></wildcardwinscript>
        <wildcardwincmdline></wildcardwincmdline>
        <wildcardgroovyscript></wildcardgroovyscript>
        <wildcardschedule>1440</wildcardschedule>
        <wildcarddisable>false</wildcarddisable>
        <wildcarddeleteinactive>false</wildcarddeleteinactive>
        <agdmethod>none</agdmethod>
        <agdparams></agdparams>
        <group>Active Directory Configs</group>
        <tags></tags>
        <technology>https://docs.microsoft.com/en-us/powershell/module/addsadministration/get-adgroup?view=win10-ps</technology>
        <adlist><![CDATA[{"agdmethod":"none","agdparams":"","id":0,"filters":[],"params":{}}]]></adlist>
        <schemaVersion>2</schemaVersion>
        <dataSourceType>2</dataSourceType>
        <attributes>
        <attribute>
            <name>scripttype</name>
            <value>powerShell</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>scriptgroovy</name>
            <value>#script version 4.1 - better credential detection and integrated authentication - commented for usability

#Format width of output
mode con cols=120

#Ingest hostname and credentials (if present) from LogicMonitor
$hostname = &#34;##SYSTEM.SYSNAME##&#34;;
$wmi_user = &#34;##WMI.USER##&#34;;
$wmi_pass = &#34;##WMI.PASS##&#34;;

#Are wmi user/ pass set? -- e.g. are these device properties blank - or is there something useful present?
if ( (($wmi_user -like &#39;*WMI.USER*&#39;) -and ($wmi_pass -like &#39;*WMI.PASS*&#39;)) -or (($wmi_user -eq &#39;&#39;) -and ($wmi_pass -eq &#39;&#39;)) )
{
    $use_credentials = $FALSE;
    $method = &#34;invoke-command&#34;;
}

else
{
    # convert user/ password into a credential object
    $use_credentials = $TRUE;
    $method = &#34;import-pssession&#34;;

    $remote_pass       = ConvertTo-SecureString -String $wmi_pass -AsPlainText -Force;
    $remote_credential = New-Object -typename System.Management.Automation.PSCredential -argumentlist $wmi_user, $remote_pass;
}

#If we found credentials above, we will use them
if ( $use_credentials ) {
    #establish a persistent session and import commands to the local collector
    $session = New-PSSession -ComputerName $hostname -authentication kerberos -Credential $remote_credential;
    Import-PSSession $session -CommandName Get-ADGroup -AllowClobber | Out-Null;

    #Retrieve the list of AD Groups on the server
    $groups = Get-ADGroup -Filter * | Sort-Object -property GroupCategory, GroupScope, Name | Select-Object GroupCategory, GroupScope, Name | Format-Table

    $groups

    Write-host &#34;Fetched with&#34; $method
    
    Remove-PSSession $session
    
    exit
}

else {
    #try integrated authentication when we don&#39;t detect credentials
    $groups = Invoke-Command -ComputerName $hostname -ScriptBlock {
        Get-ADGroup -Filter * | Sort-Object -property GroupCategory, GroupScope, Name | Select-Object GroupCategory, GroupScope, Name | Format-Table
    }
        
    $groups

    Write-host &#34;Fetched with&#34; $method
        
}

Exit</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>windowsscript</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>linuxscript</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>windowscmdline</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>linuxcmdline</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>csfileformat</name>
            <value>arbitrary</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>cstimestampformat</name>
            <value>yyyy-MM-dd hh:mm:ss z</value>
            <comment></comment>
        </attribute>
        </attributes>
        <datapoints>
        <datapoint>
            <name>AnyChange</name>
            <dataType>1</dataType>
            <type>2</type>
            <postprocessormethod>none</postprocessormethod>
            <postprocessorparam>{&#34;format&#34;:&#34;arbitrary&#34;,&#34;diff_check&#34;:{}}</postprocessorparam>
            <usevalue></usevalue>
            <alertexpr>= 1</alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <description>A change was detected in the configuration or membership of Active Directory Groups.</description>
            <maxvalue>1</maxvalue>
            <minvalue>0</minvalue>
            <userparam1>ignore</userparam1>
            <userparam2>true</userparam2>
            <userparam3>60</userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        </datapoints>
        <graphs>
        </graphs>
        <overviewgraphs>
        </overviewgraphs>
        <scripts>
        </scripts>
    </entry>
    <entry type="predatasource">
        <version>1524208623</version>
        <name>ActiveDirectory_GroupPolicies</name>
        <displayedas>Group Policies</displayedas>
        <description>List all Group Policy objects and settings for a Windows domain.</description>
        <collector>script</collector>
        <hasMultiInstances>false</hasMultiInstances>
        <schedule>3600</schedule>
        <appliesTo>hasCategory(&#34;MicrosoftDomainController&#34;)</appliesTo>
        <wildcardauto>false</wildcardauto>
        <wildcardpersist>false</wildcardpersist>
        <wildcardlinuxscript></wildcardlinuxscript>
        <wildcardlinuxcmdline></wildcardlinuxcmdline>
        <wildcardwinscript></wildcardwinscript>
        <wildcardwincmdline></wildcardwincmdline>
        <wildcardgroovyscript></wildcardgroovyscript>
        <wildcardschedule>1440</wildcardschedule>
        <wildcarddisable>false</wildcarddisable>
        <wildcarddeleteinactive>false</wildcarddeleteinactive>
        <agdmethod>none</agdmethod>
        <agdparams></agdparams>
        <group>Active Directory Configs</group>
        <tags></tags>
        <technology>https://docs.microsoft.com/en-us/powershell/module/grouppolicy/get-gpo?view=win10-ps</technology>
        <adlist><![CDATA[{"agdmethod":"none","agdparams":"","id":0,"filters":[],"params":{}}]]></adlist>
        <schemaVersion>2</schemaVersion>
        <dataSourceType>2</dataSourceType>
        <attributes>
        <attribute>
            <name>scripttype</name>
            <value>powerShell</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>scriptgroovy</name>
            <value>#script version 4.1 - better credential detection and integrated authentication - commented for usability

#Format width of output
mode con cols=120

#Ingest hostname and credentials (if present) from LogicMonitor
$hostname = &#34;##SYSTEM.SYSNAME##&#34;;
$wmi_user = &#34;##WMI.USER##&#34;;
$wmi_pass = &#34;##WMI.PASs##&#34;;

#Are wmi user/ pass set? -- e.g. are these device properties blank - or is there something useful present?
if ( (($wmi_user -like &#39;*WMI.USER*&#39;) -and ($wmi_pass -like &#39;*WMI.PASS*&#39;)) -or (($wmi_user -eq &#39;&#39;) -and ($wmi_pass -eq &#39;&#39;)) )
{
    $use_credentials = $FALSE;
    $method = &#34;invoke-command&#34;;
}

else
{
    # convert user/ password into a credential object
    $use_credentials = $TRUE;
    $method = &#34;import-pssession&#34;;

    $remote_pass       = ConvertTo-SecureString -String $wmi_pass -AsPlainText -Force;
    $remote_credential = New-Object -typename System.Management.Automation.PSCredential -argumentlist $wmi_user, $remote_pass;
}

#If we found credentials above, we will use them
if ( $use_credentials ) {
    #establish a persistent session and import commands to the local collector
    $session = New-PSSession -ComputerName $hostname -authentication kerberos -Credential $remote_credential;
    Import-PSSession $session -CommandName Get-GPO -AllowClobber | Out-Null;

    #Retrieve the list of AD Groups on the server
    $gpos = Get-GPO -All | Select-Object * -ExcludeProperty RunspaceId | Format-List;

    $gpos

    Write-host &#34;Fetched with&#34; $method
    
    Remove-PSSession $session
    
    exit
}

else {
    #try integrated authentication when we don&#39;t detect credentials
    $gpos = Invoke-Command -ComputerName $hostname -ScriptBlock {
        Get-GPO -All | Select-Object * -ExcludeProperty RunspaceId | Format-List;
    }
        
    $gpos

    Write-host &#34;Fetched with&#34; $method
        
}

Exit</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>windowsscript</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>linuxscript</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>windowscmdline</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>linuxcmdline</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>csfileformat</name>
            <value>arbitrary</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>cstimestampformat</name>
            <value>yyyy-MM-dd hh:mm:ss z</value>
            <comment></comment>
        </attribute>
        </attributes>
        <datapoints>
        <datapoint>
            <name>AnyChange</name>
            <dataType>1</dataType>
            <type>2</type>
            <postprocessormethod>none</postprocessormethod>
            <postprocessorparam>{&#34;format&#34;:&#34;arbitrary&#34;,&#34;diff_check&#34;:{&#34;ignore_line_contain&#34;:[&#34;&#60;ReadTime&#62;&#34;]}}</postprocessorparam>
            <usevalue></usevalue>
            <alertexpr>= 1</alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <description>A change was detected to the configuration or membership of Active Directory Group Policies.</description>
            <maxvalue>1</maxvalue>
            <minvalue>0</minvalue>
            <userparam1>ignore</userparam1>
            <userparam2>true</userparam2>
            <userparam3>60</userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        </datapoints>
        <graphs>
        </graphs>
        <overviewgraphs>
        </overviewgraphs>
        <scripts>
        </scripts>
    </entry>
    <entry type="predatasource">
        <version>1524208608</version>
        <name>ActiveDirectory_Forests</name>
        <displayedas>Forests</displayedas>
        <description>Active Directory Forest configuration information.</description>
        <collector>script</collector>
        <hasMultiInstances>false</hasMultiInstances>
        <schedule>3600</schedule>
        <appliesTo>hasCategory(&#34;MicrosoftDomainController&#34;)</appliesTo>
        <wildcardauto>false</wildcardauto>
        <wildcardpersist>false</wildcardpersist>
        <wildcardlinuxscript></wildcardlinuxscript>
        <wildcardlinuxcmdline></wildcardlinuxcmdline>
        <wildcardwinscript></wildcardwinscript>
        <wildcardwincmdline></wildcardwincmdline>
        <wildcardgroovyscript></wildcardgroovyscript>
        <wildcardschedule>1440</wildcardschedule>
        <wildcarddisable>false</wildcarddisable>
        <wildcarddeleteinactive>false</wildcarddeleteinactive>
        <agdmethod>none</agdmethod>
        <agdparams></agdparams>
        <group>Active Directory Configs</group>
        <tags></tags>
        <technology>https://docs.microsoft.com/en-us/powershell/module/addsadministration/get-adforest?view=win10-ps</technology>
        <adlist><![CDATA[{"agdmethod":"none","agdparams":"","id":0,"filters":[],"params":{}}]]></adlist>
        <schemaVersion>2</schemaVersion>
        <dataSourceType>2</dataSourceType>
        <attributes>
        <attribute>
            <name>scripttype</name>
            <value>powerShell</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>scriptgroovy</name>
            <value>#script version 4.1 - better credential detection and integrated authentication - commented for usability

#Format width of output
mode con cols=120

#Ingest hostname and credentials (if present) from LogicMonitor
$hostname = &#34;##SYSTEM.SYSNAME##&#34;;
$wmi_user = &#34;##WMI.USER##&#34;;
$wmi_pass = &#34;##WMI.PASs##&#34;;

#Are wmi user/ pass set? -- e.g. are these device properties blank - or is there something useful present?
if ( (($wmi_user -like &#39;*WMI.USER*&#39;) -and ($wmi_pass -like &#39;*WMI.PASS*&#39;)) -or (($wmi_user -eq &#39;&#39;) -and ($wmi_pass -eq &#39;&#39;)) )
{
    $use_credentials = $FALSE;
    $method = &#34;invoke-command&#34;;
}

else
{
    # convert user/ password into a credential object
    $use_credentials = $TRUE;
    $method = &#34;import-pssession&#34;;

    $remote_pass       = ConvertTo-SecureString -String $wmi_pass -AsPlainText -Force;
    $remote_credential = New-Object -typename System.Management.Automation.PSCredential -argumentlist $wmi_user, $remote_pass;
}

#If we found credentials above, we will use them
if ( $use_credentials ) {
    #establish a persistent session and import commands to the local collector
    $session = New-PSSession -ComputerName $hostname -authentication kerberos -Credential $remote_credential;
    Import-PSSession $session -CommandName Get-ADDomain -AllowClobber | Out-Null;

    #Retrieve the list of AD Groups on the server
    $forest = Get-ADForest | Select-Object * -ExcludeProperty RunspaceId | Format-List ;

    $forest

    Write-host &#34;Fetched with&#34; $method
    
    Remove-PSSession $session
    
    exit
}

else {
    #try integrated authentication when we don&#39;t detect credentials
    $forest = Invoke-Command -ComputerName $hostname -ScriptBlock {
        Get-ADForest | Select-Object * -ExcludeProperty RunspaceId | Format-List ;
    }
        
    $forest

    Write-host &#34;Fetched with&#34; $method
        
}

Exit</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>windowsscript</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>linuxscript</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>windowscmdline</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>linuxcmdline</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>csfileformat</name>
            <value>arbitrary</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>cstimestampformat</name>
            <value>yyyy-MM-dd hh:mm:ss z</value>
            <comment></comment>
        </attribute>
        </attributes>
        <datapoints>
        <datapoint>
            <name>AnyChange</name>
            <dataType>1</dataType>
            <type>2</type>
            <postprocessormethod>none</postprocessormethod>
            <postprocessorparam>{&#34;format&#34;:&#34;arbitrary&#34;,&#34;diff_check&#34;:{}}</postprocessorparam>
            <usevalue></usevalue>
            <alertexpr>= 1</alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <description>A change was detected in the configuration or properties of the Active Directory Forest.</description>
            <maxvalue>1</maxvalue>
            <minvalue>0</minvalue>
            <userparam1>ignore</userparam1>
            <userparam2>true</userparam2>
            <userparam3>60</userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        </datapoints>
        <graphs>
        </graphs>
        <overviewgraphs>
        </overviewgraphs>
        <scripts>
        </scripts>
    </entry>
    <entry type="predatasource">
        <version>1524203809</version>
        <name>ActiveDirectory_FederationServices</name>
        <displayedas>Federation Services</displayedas>
        <description>ADFS configuration information.</description>
        <collector>script</collector>
        <hasMultiInstances>false</hasMultiInstances>
        <schedule>3600</schedule>
        <appliesTo>hasCategory(&#34;Windows_ADFS&#34;)</appliesTo>
        <wildcardauto>false</wildcardauto>
        <wildcardpersist>false</wildcardpersist>
        <wildcardlinuxscript></wildcardlinuxscript>
        <wildcardlinuxcmdline></wildcardlinuxcmdline>
        <wildcardwinscript></wildcardwinscript>
        <wildcardwincmdline></wildcardwincmdline>
        <wildcardgroovyscript></wildcardgroovyscript>
        <wildcardschedule>1440</wildcardschedule>
        <wildcarddisable>false</wildcarddisable>
        <wildcarddeleteinactive>false</wildcarddeleteinactive>
        <agdmethod>none</agdmethod>
        <agdparams></agdparams>
        <group>Active Directory Configs</group>
        <tags></tags>
        <technology>Requires the &#39;addCategory_Microsoft_ADFS&#39; PropertySource.</technology>
        <adlist><![CDATA[{"agdmethod":"none","agdparams":"","id":0,"filters":[],"params":{}}]]></adlist>
        <schemaVersion>2</schemaVersion>
        <dataSourceType>2</dataSourceType>
        <attributes>
        <attribute>
            <name>scripttype</name>
            <value>powerShell</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>scriptgroovy</name>
            <value>#script version 4.1 - better credential detection and integrated authentication - commented for usability

#Format width of output
mode con cols=120

#Ingest hostname and credentials (if present) from LogicMonitor
$hostname = &#34;##SYSTEM.SYSNAME##&#34;;
$wmi_user = &#34;##WMI.USER##&#34;;
$wmi_pass = &#34;##WMI.PASS##&#34;;

#Are wmi user/ pass set? -- e.g. are these device properties blank - or is there something useful present?
if ( (($wmi_user -like &#39;*WMI.USER*&#39;) -and ($wmi_pass -like &#39;*WMI.PASS*&#39;)) -or (($wmi_user -eq &#39;&#39;) -and ($wmi_pass -eq &#39;&#39;)) )
{
    $use_credentials = $FALSE;
    $method = &#34;invoke-command&#34;;
}

else
{
    # convert user/ password into a credential object
    $use_credentials = $TRUE;
    $method = &#34;import-pssession&#34;;

    $remote_pass       = ConvertTo-SecureString -String $wmi_pass -AsPlainText -Force;
    $remote_credential = New-Object -typename System.Management.Automation.PSCredential -argumentlist $wmi_user, $remote_pass;
}

#If we found credentials above, we will use them
if ( $use_credentials ) {
    #establish a persistent session and import commands to the local collector
    $session = New-PSSession -ComputerName $hostname -authentication kerberos -Credential $remote_credential;
    Import-PSSession $session -CommandName Get-ADFSProperties -AllowClobber | Out-Null;

    #Retrieve the list of AD Groups on the server
    $adfs = Get-ADFSProperties | Format-List;

    $adfs

    Write-host &#34;Fetched with&#34; $method
    
    Remove-PSSession $session
    
    exit
}

else {
    #integrated authentication or when we don&#39;t detect credentials
    $adfs = Invoke-Command -ComputerName $hostname -ScriptBlock {
        Get-ADFSProperties | Format-List;
    }
        
    $adfs

    Write-host &#34;Fetched with&#34; $method
        
}

Exit</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>windowsscript</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>linuxscript</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>windowscmdline</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>linuxcmdline</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>csfileformat</name>
            <value>arbitrary</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>cstimestampformat</name>
            <value>yyyy-MM-dd hh:mm:ss z</value>
            <comment></comment>
        </attribute>
        </attributes>
        <datapoints>
        <datapoint>
            <name>AnyChange</name>
            <dataType>1</dataType>
            <type>2</type>
            <postprocessormethod>none</postprocessormethod>
            <postprocessorparam>{&#34;format&#34;:&#34;arbitrary&#34;,&#34;diff_check&#34;:{}}</postprocessorparam>
            <usevalue></usevalue>
            <alertexpr>= 1</alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <description>A change was detected in the configuration of Active Directory Federation Services.</description>
            <maxvalue>1</maxvalue>
            <minvalue>0</minvalue>
            <userparam1>ignore</userparam1>
            <userparam2>true</userparam2>
            <userparam3>60</userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        </datapoints>
        <graphs>
        </graphs>
        <overviewgraphs>
        </overviewgraphs>
        <scripts>
        </scripts>
    </entry>
    <entry type="predatasource">
        <version>1524208587</version>
        <name>ActiveDirectory_Domains</name>
        <displayedas>Domains</displayedas>
        <description>Active Directory Domain configuration information.</description>
        <collector>script</collector>
        <hasMultiInstances>false</hasMultiInstances>
        <schedule>3600</schedule>
        <appliesTo>hasCategory(&#34;MicrosoftDomainController&#34;)</appliesTo>
        <wildcardauto>false</wildcardauto>
        <wildcardpersist>false</wildcardpersist>
        <wildcardlinuxscript></wildcardlinuxscript>
        <wildcardlinuxcmdline></wildcardlinuxcmdline>
        <wildcardwinscript></wildcardwinscript>
        <wildcardwincmdline></wildcardwincmdline>
        <wildcardgroovyscript></wildcardgroovyscript>
        <wildcardschedule>1440</wildcardschedule>
        <wildcarddisable>false</wildcarddisable>
        <wildcarddeleteinactive>false</wildcarddeleteinactive>
        <agdmethod>none</agdmethod>
        <agdparams></agdparams>
        <group>Active Directory Configs</group>
        <tags></tags>
        <technology>https://docs.microsoft.com/en-us/powershell/module/addsadministration/get-addomain?view=win10-ps</technology>
        <adlist><![CDATA[{"agdmethod":"none","agdparams":"","id":0,"filters":[],"params":{}}]]></adlist>
        <schemaVersion>2</schemaVersion>
        <dataSourceType>2</dataSourceType>
        <attributes>
        <attribute>
            <name>scripttype</name>
            <value>powerShell</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>scriptgroovy</name>
            <value>#script version 4.1 - better credential detection and integrated authentication - commented for usability

#Format width of output
mode con cols=120

#Ingest hostname and credentials (if present) from LogicMonitor
$hostname = &#34;##SYSTEM.SYSNAME##&#34;;
$wmi_user = &#34;##WMI.USER##&#34;;
$wmi_pass = &#34;##WMI.PASs##&#34;;

# are wmi user/ pass set? -- e.g. are these device properties blank - or is there something useful present?
if ( (($wmi_user -like &#39;*WMI.USER*&#39;) -and ($wmi_pass -like &#39;*WMI.PASS*&#39;)) -or (($wmi_user -eq &#39;&#39;) -and ($wmi_pass -eq &#39;&#39;)) )
{
    $use_credentials = $FALSE;
    $method = &#34;invoke-command&#34;;
}

else
{
    # convert user/ password into a credential object
    $use_credentials = $TRUE;
    $method = &#34;import-pssession&#34;;

    $remote_pass       = ConvertTo-SecureString -String $wmi_pass -AsPlainText -Force;
    $remote_credential = New-Object -typename System.Management.Automation.PSCredential -argumentlist $wmi_user, $remote_pass;
}

#If we found credentials above, we will use them
if ( $use_credentials ) {
    #establish a persistent session and import commands to the local collector
    $session = New-PSSession -ComputerName $hostname -authentication kerberos -Credential $remote_credential;
    Import-PSSession $session -CommandName Get-ADDomain -AllowClobber | Out-Null;

    #Retrieve the list of AD Groups on the server
    $domain = Get-ADDomain | Format-List;

    $domain

    Write-host &#34;Fetched with&#34; $method
    
    Remove-PSSession $session
    
    exit
}

else {
    #try integrated authentication when we don&#39;t detect credentials
    $domain = Invoke-Command -ComputerName $hostname -ScriptBlock {
        Get-ADDomain | Format-List;
    }
        
    $domain

    Write-host &#34;Fetched with&#34; $method
        
}

Exit</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>windowsscript</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>linuxscript</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>windowscmdline</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>linuxcmdline</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>csfileformat</name>
            <value>arbitrary</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>cstimestampformat</name>
            <value>yyyy-MM-dd hh:mm:ss z</value>
            <comment></comment>
        </attribute>
        </attributes>
        <datapoints>
        <datapoint>
            <name>AnyChange</name>
            <dataType>1</dataType>
            <type>2</type>
            <postprocessormethod>none</postprocessormethod>
            <postprocessorparam>{&#34;format&#34;:&#34;arbitrary&#34;,&#34;diff_check&#34;:{}}</postprocessorparam>
            <usevalue></usevalue>
            <alertexpr>= 1</alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <description>A change was detected in the configuration or properties of the Active Directory Domain.</description>
            <maxvalue>1</maxvalue>
            <minvalue>0</minvalue>
            <userparam1>ignore</userparam1>
            <userparam2>true</userparam2>
            <userparam3>60</userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        </datapoints>
        <graphs>
        </graphs>
        <overviewgraphs>
        </overviewgraphs>
        <scripts>
        </scripts>
    </entry>
    <entry type="predatasource">
        <version>1524203715</version>
        <name>ActiveDirectory_DomainControllers</name>
        <displayedas>Domain Controllers</displayedas>
        <description>Active Directory Domain Controllers configuration information.</description>
        <collector>script</collector>
        <hasMultiInstances>false</hasMultiInstances>
        <schedule>3600</schedule>
        <appliesTo>hasCategory(&#34;MicrosoftDomainController&#34;)</appliesTo>
        <wildcardauto>false</wildcardauto>
        <wildcardpersist>false</wildcardpersist>
        <wildcardlinuxscript></wildcardlinuxscript>
        <wildcardlinuxcmdline></wildcardlinuxcmdline>
        <wildcardwinscript></wildcardwinscript>
        <wildcardwincmdline></wildcardwincmdline>
        <wildcardgroovyscript></wildcardgroovyscript>
        <wildcardschedule>1440</wildcardschedule>
        <wildcarddisable>false</wildcarddisable>
        <wildcarddeleteinactive>false</wildcarddeleteinactive>
        <agdmethod>none</agdmethod>
        <agdparams></agdparams>
        <group>Active Directory Configs</group>
        <tags></tags>
        <technology>https://docs.microsoft.com/en-us/powershell/module/addsadministration/get-addomaincontroller?view=win10-ps</technology>
        <adlist><![CDATA[{"agdmethod":"none","agdparams":"","id":0,"filters":[],"params":{}}]]></adlist>
        <schemaVersion>2</schemaVersion>
        <dataSourceType>2</dataSourceType>
        <attributes>
        <attribute>
            <name>scripttype</name>
            <value>powerShell</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>scriptgroovy</name>
            <value>#script version 4.1 - better credential detection and integrated authentication - commented for usability

#Format width of output
mode con cols=120

#Ingest hostname and credentials (if present) from LogicMonitor
$hostname = &#34;##SYSTEM.SYSNAME##&#34;;
$wmi_user = &#34;##WMI.USER##&#34;;
$wmi_pass = &#34;##WMI.PASs##&#34;;

#Are wmi user/ pass set? -- e.g. are these device properties blank - or is there something useful present?
if ( (($wmi_user -like &#39;*WMI.USER*&#39;) -and ($wmi_pass -like &#39;*WMI.PASS*&#39;)) -or (($wmi_user -eq &#39;&#39;) -and ($wmi_pass -eq &#39;&#39;)) )
{
    $use_credentials = $FALSE;
    $method = &#34;invoke-command&#34;;
}

else
{
    # convert user/ password into a credential object
    $use_credentials = $TRUE;
    $method = &#34;import-pssession&#34;;

    $remote_pass       = ConvertTo-SecureString -String $wmi_pass -AsPlainText -Force;
    $remote_credential = New-Object -typename System.Management.Automation.PSCredential -argumentlist $wmi_user, $remote_pass;
}

#If we found credentials above, we will use them
if ( $use_credentials ) {
    #establish a persistent session and import commands to the local collector
    $session = New-PSSession -ComputerName $hostname -authentication kerberos -Credential $remote_credential;
    Import-PSSession $session -CommandName Get-ADDomainController -AllowClobber | Out-Null;

    #Retrieve the list of AD Groups on the server
    $dcs = Get-ADDomainController | Select-Object * -ExcludeProperty RunspaceId | Format-List ;

    $dcs

    Write-host &#34;Fetched with&#34; $method
    
    Remove-PSSession $session
    
    exit
}

else {
    #try integrated authentication when we don&#39;t detect credentials
    $dcs = Invoke-Command -ComputerName $hostname -ScriptBlock {
        Get-ADDomainController | Select-Object * -ExcludeProperty RunspaceId | Format-List ;
    }
        
    $dcs

    Write-host &#34;Fetched with&#34; $method
        
}

Exit</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>windowsscript</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>linuxscript</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>windowscmdline</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>linuxcmdline</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>csfileformat</name>
            <value>arbitrary</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>cstimestampformat</name>
            <value>yyyy-MM-dd hh:mm:ss z</value>
            <comment></comment>
        </attribute>
        </attributes>
        <datapoints>
        <datapoint>
            <name>AnyChange</name>
            <dataType>1</dataType>
            <type>2</type>
            <postprocessormethod>none</postprocessormethod>
            <postprocessorparam>{&#34;format&#34;:&#34;arbitrary&#34;,&#34;diff_check&#34;:{}}</postprocessorparam>
            <usevalue></usevalue>
            <alertexpr>= 1</alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <description>A change was detected in the configuration or membership of Active Directory Domain Controllers.</description>
            <maxvalue>1</maxvalue>
            <minvalue>0</minvalue>
            <userparam1>ignore</userparam1>
            <userparam2>true</userparam2>
            <userparam3>60</userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        </datapoints>
        <graphs>
        </graphs>
        <overviewgraphs>
        </overviewgraphs>
        <scripts>
        </scripts>
    </entry>
    <entry type="predatasource">
        <version>1524203763</version>
        <name>ActiveDirectory_Computers</name>
        <displayedas>Computers</displayedas>
        <description>List of Active Directory Domain Computers and status.</description>
        <collector>script</collector>
        <hasMultiInstances>false</hasMultiInstances>
        <schedule>3600</schedule>
        <appliesTo>hasCategory(&#34;MicrosoftDomainController&#34;)</appliesTo>
        <wildcardauto>false</wildcardauto>
        <wildcardpersist>false</wildcardpersist>
        <wildcardlinuxscript></wildcardlinuxscript>
        <wildcardlinuxcmdline></wildcardlinuxcmdline>
        <wildcardwinscript></wildcardwinscript>
        <wildcardwincmdline></wildcardwincmdline>
        <wildcardgroovyscript></wildcardgroovyscript>
        <wildcardschedule>1440</wildcardschedule>
        <wildcarddisable>false</wildcarddisable>
        <wildcarddeleteinactive>false</wildcarddeleteinactive>
        <agdmethod>none</agdmethod>
        <agdparams></agdparams>
        <group>Active Directory Configs</group>
        <tags></tags>
        <technology>https://docs.microsoft.com/en-us/powershell/module/addsadministration/get-adcomputer?view=win10-ps</technology>
        <adlist><![CDATA[{"agdmethod":"none","agdparams":"","id":0,"filters":[],"params":{}}]]></adlist>
        <schemaVersion>2</schemaVersion>
        <dataSourceType>2</dataSourceType>
        <attributes>
        <attribute>
            <name>scripttype</name>
            <value>powerShell</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>scriptgroovy</name>
            <value>#script version 4.1 - better credential detection and integrated authentication - commented for usability

#Format width of output
mode con cols=120

#Ingest hostname and credentials (if present) from LogicMonitor
$hostname = &#34;##SYSTEM.SYSNAME##&#34;;
$wmi_user = &#34;##WMI.USER##&#34;;
$wmi_pass = &#34;##WMI.PASS##&#34;;

# are wmi user/ pass set? -- e.g. are these device properties blank - or is there something useful present?
if ( (($wmi_user -like &#39;*WMI.USER*&#39;) -and ($wmi_pass -like &#39;*WMI.PASS*&#39;)) -or (($wmi_user -eq &#39;&#39;) -and ($wmi_pass -eq &#39;&#39;)) )
{
    $use_credentials = $FALSE;
    $method = &#34;invoke-command&#34;;
}

else
{
    # convert user/ password into a credential object
    $use_credentials = $TRUE;
    $method = &#34;import-pssession&#34;;

    $remote_pass       = ConvertTo-SecureString -String $wmi_pass -AsPlainText -Force;
    $remote_credential = New-Object -typename System.Management.Automation.PSCredential -argumentlist $wmi_user, $remote_pass;
}

#If we found credentials above, we will use them
if ( $use_credentials ) {
    #establish a persistent session and import commands to the local collector
    $session = New-PSSession -ComputerName $hostname -authentication kerberos -Credential $remote_credential;
    Import-PSSession $session -CommandName Get-ADComputer -AllowClobber | Out-Null;

    #Retrieve the list of AD Groups on the server
    $computers = Get-ADComputer -Filter * | sort-object -property Enabled,DNSHostName | select Enabled,DNSHostName | Format-Table;

    $computers

    Write-host &#34;Fetched with&#34; $method
    
    Remove-PSSession $session
    
    exit
}

else {
    #integrated authentication or when we don&#39;t detect credentials
    $computers = Invoke-Command -ComputerName $hostname -ScriptBlock {
        Get-ADComputer -Filter * | sort-object -property Enabled,DNSHostName | select Enabled,DNSHostName | Format-Table;
    }
        
    $computers

    Write-host &#34;Fetched with&#34; $method
        
}

Exit</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>windowsscript</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>linuxscript</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>windowscmdline</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>linuxcmdline</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>csfileformat</name>
            <value>arbitrary</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>cstimestampformat</name>
            <value>yyyy-MM-dd hh:mm:ss z</value>
            <comment></comment>
        </attribute>
        </attributes>
        <datapoints>
        <datapoint>
            <name>AnyChange</name>
            <dataType>1</dataType>
            <type>2</type>
            <postprocessormethod>none</postprocessormethod>
            <postprocessorparam>{&#34;format&#34;:&#34;arbitrary&#34;,&#34;diff_check&#34;:{}}</postprocessorparam>
            <usevalue></usevalue>
            <alertexpr>= 1</alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <description>A change was detected in the configuration or membership of Active Directory Computers.</description>
            <maxvalue>1</maxvalue>
            <minvalue>0</minvalue>
            <userparam1>ignore</userparam1>
            <userparam2>true</userparam2>
            <userparam3>60</userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        </datapoints>
        <graphs>
        </graphs>
        <overviewgraphs>
        </overviewgraphs>
        <scripts>
        </scripts>
    </entry>
</feed>